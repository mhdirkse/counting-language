# This case study is about the game of the goose. There is a board
# with 63 numbered fields and in addition a start field. At the start
# of the game, you have a colored pawn at the start field. You play
# the game by throwing two dice. The total determines how much
# fields you can advance your pawn. You win when your pawn reaches
# the end field 63. See
# https://howdoyouplayit.com/game-of-the-goose-rules-how-do-you-play-game-of-the-goose/
# 
# Let us first simplify the game as much as possible, as follows:
# i) We consider only one goose.
# ii) All fields are treated like normal fields.
# iii) We skip the rule that a goose has to walk back if he does not land
#      on square 63 exactly. In our simplification for example, the game
#      ends on the next turn if a goose is at field 61. Any dice roll
#      of two or more is enough to reach 63.
#
# Before we start, we calculate the probability distribution for a
# dice roll.

experiment expTwoDice() {
  sample d1 from distribution 1:6;
  sample d2 from distribution 1:6;
  return d1 + d2;
};

# diceRoll = expTwoDice();

# print diceRoll;

# We want to know how many turns it take to finish. We set up a Markov chain
# with a two-valued state: We have the number of turns played so far and the
# current field.

experiment nextTurn(distribution<tuple<int, int>> state, distribution<int> diceRoll) {
  sample numTurns, currentField from state;
  if(currentField == 63) {
    return numTurns, currentField;
  } else {
    sample d from diceRoll;
    t = currentField + d;
    if(t >= 63) {
      t = 63;
    };
    return numTurns + 1, t;
  };
};

function play(distribution<tuple<int, int>> startState, int numTurns, distribution<int> diceRoll) {
  currentState = startState;
  repeat(numTurns) {
    currentState = nextTurn(currentState, diceRoll);
  };
  return currentState;
};

# simplifiedResult = play( (distribution tuple 0, 0), 32, diceRoll);
# print simplifiedResult;

# This results in beautiful display of large numbers, but it is not very
# helpful. We know that we are ending on face 63, so we can omit that.
# And we do not need the exact numbers, but floating-point approximations.

experiment selectNumTurns(distribution<tuple<int, int>> state) {
  sample numTurns, _ from state;
  return numTurns;
};

# numTurns = selectNumTurns(simplifiedResult);

# print approx numTurns;

# print approx numTurns.E();

# Only the values 7 - 13 inclusive have a probability of more than
# one permille. The expected value for the number of turns is 9.49.
# This value is not surprising. The expected value for throwing one
# dice is 3 + 1/2. Two dice have an expected value of 7. We are
# aiming for field 63, and 63 / 7 = 9.

# Next, we make it more complicated by omitting our third simplification.
# Like in the real game, a goose has to move back if it does not reach
# face 63 exactly.

function advanceWithBack(int currentField, int d) {
  t = currentField + d;
  if(t >= 63) {
    back = t - 63;
    return 63 - back;
  } else {
    return t;
  };
};

# Should be 8
# print advanceWithBack(3, 5);
# Should be 63
# print advanceWithBack(61, 2);
# Should be 62
# print advanceWithBack(61, 3);
# Should be 60
# print advanceWithBack(61, 5);

# There is no upper bound anymore to the number of turns.
# We want to calculate until the expectation of the number
# of turns remains almost constant when more dice throws
# are considered.

function isResidualBelowThreshold(fraction expectationBefore, fraction expectationAfter) {
  if(expectationAfter == (0 / 1)) {
    return false;
  };
  residual = expectationAfter - expectationBefore;
  if(residual < (0 / 1)) {
    residual = - residual;
  };
  relativeResidual = residual / expectationAfter;
  return relativeResidual < (1 / (1000*1000*1000));
};

experiment selectNumTurnsOfGame(distribution<tuple<int, int>> state) {
  sample numTurns, field from state;
  if(field == 63) {
    return numTurns;
  };
};

function isDone(distribution<tuple<int, int>> stateBefore, distribution<tuple<int, int>> stateAfter) {
  numTurnsBefore = selectNumTurnsOfGame(stateBefore);
  numTurnsAfter = selectNumTurnsOfGame(stateAfter);
  if( (numTurnsBefore.probabilityOfUnknown() == (1/1)) or (numTurnsAfter.probabilityOfUnknown() == (1/1)) ) {
    return false;
  } else {
# Print the residual
    expectationBefore = numTurnsBefore.known().E();
    expectationAfter = numTurnsAfter.known().E();
    print approx tuple expectationAfter, ((expectationAfter - expectationBefore) / expectationAfter);
    return isResidualBelowThreshold(numTurnsBefore.known().E(), numTurnsAfter.known().E());
  }
};

# Should be false
# print isResidualBelowThreshold10 / 1, 11 / 1);
# Should be false
# print isResidualBelowThreshold11 / 1, 10 / 1);
# Should be true
# print isResidualBelowThreshold10 / 1, 10 + 1 / (1000*1000*1000*10));
# Should be true
# print isResidualBelowThreshold10 / 1, 10 - 1 / (1000*1000*1000*10));

experiment nextTurnWithBack(distribution<tuple<int, int>> state, distribution<int> diceRoll) {
  sample numTurns, currentField from state;
  if(currentField == 63) {
    return numTurns, currentField;
  } else {
    sample d from diceRoll;
    return (numTurns + 1), advanceWithBack(currentField, d);
  };
};

function playWithBack(distribution<tuple<int, int>> startState, distribution<int> diceRoll) {
  currentState = startState;
  done = false;
  while(not done) {
    stateBefore = currentState;
    currentState = nextTurnWithBack(stateBefore, diceRoll);
    done = isDone(stateBefore, currentState);
  };
  return selectNumTurnsOfGame(currentState);
};

# print approx playWithBack( (distribution tuple 0, 0), diceRoll);

# The maximum number of turns considered is 274. We can test our
# stop criterion as follows. The next number of rounds being considered
# is 275. An upper bound for the probability for this number of rounds
# is the probability we see for unknown: 983.5E-12. Dividing by the
# expectation for the number of rounds produces an upper bound for the
# residual: 1.3E-8. This is indeed more than the threshold we applied:
# 1E-9.
#
# The game of the goose takes much longer if gooses have to walk back from
# field 63 with excess dice rolls. The expected number of rounds has
# become 20.94 instead of 9.49.

# Next, we investigate the impact of goose fields and the death field.
# Fields 9, 18, 27, 36, 45 and 54 show a goose, allowing a goose to
# move again the amount it moved to reach the goose. For example,
# if a goose at 6 throws 3, he first reaches 9. Then he is allowed
# to advance three more fields, so he reaches field 12.
#
# Field 58 shows a symbol for the death. If a goose reaches that field,
# he has to return to start.

function advanceGooseDeath(int currentField, distribution<int> d, bool doGoose, bool doDeath) {
  if(doGoose and (currentField == 0)) {
    if(d == (distribution 5, 4)) {
      return 53;
    };
    if(d == (distribution 6, 3)) {
      return 26;
    };
  };
  roll = d.sum();
  t = currentField + roll;
  gooseFields = distribution 9, 18, 27, 36, 45, 54;
  if(doGoose) {
    while(gooseFields.hasElement(t) and (not (t == 63))) {
      t = t + roll;
    };
  };
  if(t > 63) {
    back = t - 63;
    t = 63 - back;
    if(doGoose) {
      while(gooseFields.hasElement(t)) {
        t = t - roll;
      };
    };
  };
  if(doDeath and (t == 58)) {
    return 0;
  };
  return t;
};

# Should be 6
# print advanceGooseDeath(1, (distribution 2, 3), false, false);
# Should be 63
# print advanceGooseDeath(60, (distribution 1, 2), false, false);
# Should be 60
# print advanceGooseDeath(62, (distribution 2, 2), false, false);

# Should be 6
# print advanceGooseDeath(1, (distribution 2, 3), true, true);
# Should be 63
# print advanceGooseDeath(60, (distribution 1, 2), true, true);
# Should be 60
# print advanceGooseDeath(62, (distribution 2, 2), true, true);

# Should be 9
# print advanceGooseDeath(6, (distribution 1, 2), false, false);
# Should be 12
# print advanceGooseDeath(6, (distribution 1, 2), true, false);
# Should be 9
# print advanceGooseDeath(0, (distribution 6, 3), false, false);
# Should be 26
# print advanceGooseDeath(0, (distribution 6, 3), true, false);
# Should be 9
# print advanceGooseDeath(0, (distribution 5, 4), false, false);
# Should be 53
# print advanceGooseDeath(0, (distribution 5, 4), true, false);
# Should be 10
# print advanceGooseDeath(1, (distribution 5, 4), true, false);
# Should be 54
# print advanceGooseDeath(62, (distribution 5, 5), false, false);
# Should be 44
# print advanceGooseDeath(62, (distribution 5, 5), true, false);

# Should be 58
# print advanceGooseDeath(55, (distribution 1, 2), false, false);
# Should be 0
# print advanceGooseDeath(55, (distribution 1, 2), false, true);
# Should be 58
# print advanceGooseDeath(62, (distribution 3, 3), false, false);
# Should be 0
# print advanceGooseDeath(62, (distribution 3, 3), false, true);

# Should be 54
# print advanceGooseDeath(50, (distribution 1, 3), false, false);
# Should be 58
# print advanceGooseDeath(50, (distribution 1, 3), true, false);
# Should be 0
# print advanceGooseDeath(50, (distribution 1, 3), true, true);

experiment nextTurnGooseDeath(distribution<tuple<int, int>> state, bool doGoose, bool doDeath) {
  sample numTurns, currentField from state;
  if(currentField == 63) {
    return numTurns, currentField;
  } else {
    sample d as 2 from distribution 1:6;
    return (numTurns + 1), advanceGooseDeath(currentField, d.unsort(), doGoose, doDeath);
  };
};

function playGooseDeath(distribution<tuple<int, int>> startState, bool doGoose, bool doDeath) {
  currentState = startState;
  done = false;
  while(not done) {
    stateBefore = currentState;
    currentState = nextTurnGooseDeath(stateBefore, doGoose, doDeath);
    done = isDone(stateBefore, currentState);
  };
  return selectNumTurnsOfGame(currentState);
};

# print approx playGooseDeath((distribution tuple 0, 0), false, false);

function tryGooseDeath() {
  result = tuple<bool, bool, distribution<int>>[];
  for doGoose in [false, true] {
    for doDeath in [false, true] {
      finalState = playGooseDeath((distribution tuple 0, 0), doGoose, doDeath);
      result = result.add(tuple doGoose, doDeath, finalState);
    };
  };
  return result;
};

procedure printGooseDeath() {
  for record in tryGooseDeath() {
    print approx tuple record[1], record[2], record[3].known().E();
  };
};

printGooseDeath();

# The result should be as follows (after trivial manual formatting):
#
# doGoose, doDeath, expected num. turns
# -------------------------------------
# false,   false,   20.94E0
# false,   true,    34.16E0
# true,    false,   20.61E0
# true,    true,    33.05E0
#
# Introducing the goose fields on the game board has
# a very limited effect: The expected number of turns
# decreases with about 1.1 in combination with the death
# and with much less if the death is not present.
#
# Introducing the death increases the number of turns with
# more than 60%.
